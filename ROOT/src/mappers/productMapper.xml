<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="com.madforgolf.mapper.ProductMapper">

		<!-- join하기 위해 -->
	<resultMap type="ProductVO" id="product">
		<id property="prod_num" column="prod_num" />
		<result property="seller_id" column="seller_id"/>
		<result property="buyer_id" column="buyer_id"/>
		<result property="prod_name" column="prod_name"/>
		<result property="prod_img" column="prod_img"/>
		<result property="prod_date" column="prod_date"/>
		<result property="price" column="price"/>
		<result property="detail" column="detail"/>
		<result property="condition" column="condition"/>
		<result property="category" column="category"/>
		<result property="like_count" column="like_count"/>
		<result property="payment" column="payment"/>
		<result property="gender" column="gender"/>
		<result property="prod_img2" column="prod_img2"/>
		<result property="prod_img3" column="prod_img3"/>
		<collection property="seller" resultMap="seller"></collection>
		<collection property="deal" resultMap="deal"></collection>
	</resultMap>
	
	<resultMap type="MemberVO" id="seller">
		<id property="user_id" column="user_id"/>
		<result property="user_pw" column="user_pw"/>
		<result property="user_name" column="user_name"/>
		<result property="user_phone" column="user_phone"/>
		<result property="reg_date" column="reg_date"/>
		<result property="score" column="score"/>
		<result property="latitude" column="latitude"/>
		<result property="logitude" column="logitude"/>
		<result property="roadFullAddr" column="roadFullAddr"/>
	</resultMap>
	
	<resultMap type="MemberVO" id="buyer">
		<id property="user_id" column="user_id"/>
		<result property="user_pw" column="user_pw"/>
		<result property="user_name" column="user_name"/>
		<result property="user_phone" column="user_phone"/>
		<result property="reg_date" column="reg_date"/>
		<result property="score" column="score"/>
		<result property="latitude" column="latitude"/>
		<result property="logitude" column="logitude"/>
	</resultMap>
	
	<resultMap type="DealVO" id="deal">
		<id property="deal_num" column="deal_num"/>
		<result property="seller_id" column="seller_id"/>
		<result property="buyer_id" column="buyer_id"/>
		<result property="prod_num" column="prod_num"/>
		<result property="price" column="price"/>
		<result property="state" column="state"/>
		<result property="deal_date" column="deal_date"/>
		<result property="review_count" column="review_count"/>
		
		
		<collection property="product" resultMap="product"></collection>
		<collection property="seller" resultMap="seller"></collection>
		<collection property="buyer" resultMap="buyer"></collection>
	</resultMap>

	<!-- 메인(index.jsp)상품 목록(일단, 최신순으로 카테고리/성별구분없이 설정함) -->
	<select id="listMain" resultMap="product">
		select p.*
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where d.state != '거래후'
		order by p.prod_date desc
	</select>
	
	<!-- 메인에서 타고 들어가는 카테고리,성별 분류 없는 인기순 상품목록리스트 -->
	<select id="listLike3" resultMap="product">
		select p.*
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where d.state != '거래후'
		order by p.like_count desc
		limit #{pageStart},#{perPageNum}
	</select>
	<!-- 메인에서 타고 들어가는 카테고리,성별 분류 없는 인기순 상품목록리스트 -->
	
	<!-- 메인에서 타고 들어가는 카테고리,성별 분류 없는 최신순 상품목록리스트 -->
	<select id="listAll3" resultMap="product">
		select p.*
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where d.state != '거래후'
		order by p.prod_date desc
		limit #{pageStart},#{perPageNum}
	</select>
	<!-- 메인에서 타고 들어가는 카테고리,성별 분류 없는 최신순 상품목록리스트 -->
	
	
	<!-- 1. 상품 목록 조회(all)--> <!-- 성별구분X+최신순 -->
	<select id="listAll" resultMap="product">
<!-- 		select * -->
<!-- 		from mfg_products -->
<!-- 		where category = #{category} -->
<!-- 		order by prod_date desc -->
<!-- 		limit #{pageStart},#{perPageNum} -->

		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = (select substring_index(roadFullAddr, ' ', 2)
														 from mfg_member
														 where user_id = #{user_id})
		and p.category = #{category}
		and d.state != '거래후'
		order by p.prod_date desc
		limit #{pageStart},#{perPageNum}
	</select>
	
	<!-- 1-1. 상품 목록 조회(all)--> <!-- 성별구분X+최신순 -->
	<select id="listAll1-1" resultMap="product">
		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = #{addr}
		and p.category = #{category}
		and d.state != '거래후'
		order by p.prod_date desc
		limit #{pageStart},#{perPageNum}
	</select>
	
	<!-- 2. 상품 목록 조회(성별)--> <!-- 성별구분O+최신순 -->
	<select id="listAll2" resultMap="product">
<!-- 		select * from mfg_products -->
<!-- 		where category = #{category} -->
<!-- 		and gender = #{gender} -->
<!-- 		order by prod_date desc -->
<!-- 		limit #{pageStart},#{perPageNum} -->
		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = (select substring_index(roadFullAddr, ' ', 2)
														 from mfg_member
														 where user_id = #{user_id})
		and p.category = #{category}
		and p.gender = #{gender}
		and d.state != '거래후'
		order by p.prod_date desc
		limit #{pageStart},#{perPageNum}
	</select>
	

	
	<!-- 2-1. 상품 목록 조회(성별)--> <!-- 성별구분O+최신순 -->
	<select id="listAll2-1" resultMap="product">
		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = #{addr}
		and p.category = #{category}
		and p.gender = #{gender}
		and d.state != '거래후'
		order by p.prod_date desc
		limit #{pageStart},#{perPageNum}
	</select>
	
	
	<!-- 3. 상품목록 조회(성별구분X+인기순) -->
	<select id="listLike" resultMap="product">
		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = (select substring_index(roadFullAddr, ' ', 2)
														 from mfg_member
														 where user_id = #{user_id})
		and p.category = #{category}
		and d.state != '거래후'
		order by p.like_count desc
		limit #{pageStart},#{perPageNum}
	</select>
	
	<!-- 3-1. 상품목록 조회(성별구분X+인기순) -->
	<select id="listLike1-1" resultMap="product">
		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = #{addr}
		and p.category = #{category}
		and d.state != '거래후'
		order by p.like_count desc
		limit #{pageStart},#{perPageNum}
	</select>

	<!-- 4. 상품목록 조회(성별구분O+인기순) -->
	<select id="listLike2" resultMap="product">
		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = (select substring_index(roadFullAddr, ' ', 2)
														 from mfg_member
														 where user_id = #{user_id})
		and p.category = #{category}
		and p.gender = #{gender}
		and d.state != '거래후'
		order by p.like_count desc
		limit #{pageStart},#{perPageNum}
	</select>
	
	<!-- 4-2. 상품목록 조회(성별구분O+인기순) -->
	<select id="listLike2-2" resultMap="product">
		select p.*
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = #{addr}
		and p.category = #{category}
		and p.gender = #{gender}
		and d.state != '거래후'
		order by p.like_count desc
		limit #{pageStart},#{perPageNum}
	</select>
	
	<!-- 5. 상품 개수(all) -->
	<select id="getTotalCnt" resultType="Integer">
		select count(p.prod_num)
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = (select substring_index(roadFullAddr, ' ', 2)
														 from mfg_member
														 where user_id = #{user_id})
		and p.category = #{category}
		and d.state != '거래후'
	</select>
	
	<!-- 5-1. 상품 개수(all) -->
	<select id="getTotalCnt1-1" resultType="Integer">
		select count(p.prod_num)
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = #{addr}
		and p.category = #{category}
		and d.state != '거래후'
	</select>
	
	<!-- 6. 상품 개수(성별) -->
	<select id="getTotalCnt2" resultType="Integer">
		select count(p.prod_num)
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = (select substring_index(roadFullAddr, ' ', 2)
														 from mfg_member
														 where user_id = #{user_id})
		and p.category = #{category}
		and p.gender = #{gender}
		and d.state != '거래후'
	</select>
	
	<!-- 6-2. 상품 개수(성별) -->
	<select id="getTotalCnt2-1" resultType="Integer">
		select count(p.prod_num)
		from mfg_products p join mfg_member m
		on p.seller_id = m.user_id
		join mfg_deal d
		on p.prod_num = d.prod_num
		where substring_index(m.roadFullAddr, ' ', 2) = #{addr}
		and p.category = #{category}
		and p.gender = #{gender}
		and d.state != '거래후'
	</select>
	
	
	<!-- 메인  -> 인기순,최신순   -->
	<select id="getTotalCnt3" resultType="Integer">
		select count(p.prod_num)
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where d.state != '거래후'
	</select>
	
	<!-- 
		상품 1개 상세 출력 -->
<!-- 	<select id="getProductDetail" resultType="ProductVO">
		select *
		from mfg_products
		where prod_num = #{prod_num}
	</select> -->
<!-- 	<select id="getProductDetail" resultMap="product">
		select p.prod_img, p.seller_id, p.prod_name, p.price, p.detail,p.like_count, p.`condition`, p.prod_num,p.gender,
		p.category, d.state
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where p.prod_num = #{prod_num}
	</select> -->
	
<!-- 	<select id="getProductDetail" resultMap="deal">
		select p.seller_id, p.prod_name, p.price, p.detail, p.prod_img, p.prod_img2, p.prod_img3,p.like_count,
		p.prod_num,p.`condition`, p.gender, p.category, d.state, d.deal_num
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where p.prod_num =#{prod_num}
	</select> -->
	
	<!-- ////////////////////////// 다은 수정 시작 //////////////////////////-->
	
	
	<select id="getProductDetail2" resultMap="deal">
		select p.seller_id, p.prod_name, p.price, p.detail, p.prod_img, p.prod_img2, p.prod_img3,p.like_count,
		p.prod_num,p.`condition`, p.gender, p.category, d.state, d.deal_num
		from mfg_products p join mfg_deal d
		on p.prod_num = d.deal_num
		where p.prod_num =#{prod_num}
	</select>
	
	<select id="getProductDetail" resultMap="deal">
		select p.seller_id, p.prod_name, p.price, p.detail, p.prod_img, p.prod_img2, p.prod_img3,p.like_count,
		p.prod_num,p.`condition`, p.gender, p.category, d.state, d.deal_num
		from mfg_products p join mfg_deal d
		on p.prod_num = d.deal_num
		where p.prod_num =#{deal_num}
	</select>
	
	<!-- ////////////////////////// 다은 수정 종료 ////////////////////////// -->
	
	<select id="getState" resultType="String">
		select state
		from mfg_deal
		where deal_num =#{deal_num}
	</select>
	
	<!-- 상품 등록 -->
	<insert id="insert">
		insert into mfg_products (seller_id, prod_name, prod_img, price, detail, `condition`, category, gender, prod_img2, prod_img3)
		values (#{seller_id}, #{prod_name}, #{prod_img}, #{price}, #{detail}, #{condition}, #{category}, #{gender}, #{prod_img2}, #{prod_img3})
	</insert>
	
	<select id="insert2" resultType="ProductVO">
		select * from mfg_products
		where prod_img = #{prod_img}
	</select>
	
	<!-- 상품 수정 GET  -->
	<select id="read" resultType="ProductVO">
		select * from mfg_products 
		where prod_num = #{prod_num} 
	</select>
	
		
	<!-- 상품 수정 POST-->
	<update id="update">
	  update mfg_products 
	  set prod_name=#{prod_name},price=#{price},detail=#{detail},`condition`=#{condition},category=#{category},gender=#{gender},prod_img=#{prod_img},prod_img2=#{prod_img2},prod_img3=#{prod_img3}
	  where prod_num = #{prod_num}	    
	</update>
	
	
	
	<resultMap type="com.madforgolf.domain.ProductVO" id="vo">
		<result property="content" column="content"/>
	</resultMap>
	

	
	<update id="updateReadCnt">
		update mfg_products 
		set viewcnt=viewcnt+1 
		where prod_num = #{prod_num}	
	</update>
	
	
	<delete id="remove">
		delete from mfg_products where prod_num=#{prod_num} 
	</delete>
	
<!-- 	<select id="listPage" resultType="ProductVO">
	  select * from mfg_products 
	  order by prod_num desc
	  limit #{page},10
	</select>
	
	<select id="listPage2" resultType="ProductVO">
	  select * from mfg_products 
	  order by prod_num desc 
	  limit #{page},#{pageSize}
	</select>
	 -->
	<select id="listPage3" resultType="ProductVO">
	  select * from mfg_products 
	  order by prod_num desc
	  limit #{pageStart},#{perPageNum}
	</select>
	
	
	<!-- 판매내역 목록 띄우기  -->
	<select id="sellProductList" resultMap="product">
		select *
		from mfg_products
		where seller_id = #{user_id}
		order by prod_date desc
		limit #{pm.startRow},#{pm.vo.perPageNum}
	</select>
	
	<select id="sellProductListCnt" resultType="Integer"> 
		select count(*)
		from mfg_products
		where seller_id = #{user_id}
		order by prod_date desc
	</select>
	<!-- 판매내역 목록 띄우기   -->
	
	<!-- 구매내역 목록 띄우기 -->
	<select id="buyProductList" resultMap="deal">
		select review_count, d.deal_num, p.prod_num, d.deal_date, p.prod_name, p.price 
		from mfg_products p join 
		(select (select count(review_num) as cnt from mfg_review WHERE deal_num =md.deal_num ) as review_count, 
		md.* from mfg_deal as md) d 
		on p.prod_num = d.prod_num
		where d.buyer_id = #{user_id} and state ='거래후'
		order by prod_date desc
		limit #{pm.startRow},#{pm.vo.perPageNum}		
	</select>
	
	<!-- 구매내역에서 리뷰 작성하기  -->
	<insert id="buyProductWrite">
	
	INSERT INTO mfg_review
	  
	  ( deal_num , prod_num, buyer_id,  content, score, review_date)
	
	  VALUES(#{deal_num},  #{prod_num}, #{buyer_id}, #{content}, #{score},  CURRENT_TIMESTAMP);
	
	</insert>
	
	
	<select id="buyProductListCnt" resultType="Integer">
		select count(*) 
		from mfg_products p join mfg_deal d 
		on p.prod_num = d.prod_num
		where d.buyer_id = #{user_id} and state ='거래후'
		order by prod_date desc
	</select>
	
	<!-- 작성한 리뷰 불러오기
	
	반환 타입 테이블 명과 자바 객체 타입 변수명이 같으면
	굳이 최상단의 resultMap 형식으로 작성하지 않고 다음과 같이 
	com.madforgolf.domain.SellerReviewVO 객체 클래스값을 resultType 으로 입력해 주면 반환처리 됩니다.
	 
	  -->
	<select id="getReviewInfo"  resultType="com.madforgolf.domain.SellerReviewVO">
		select *
		from mfg_review
		where buyer_id=#{buyer_id} and prod_num=#{prod_num} and deal_num=#{deal_num}					
	</select>
		
	<!-- 구매내역 목록 띄우기 -->
	
	<!-- 거래중 목록 띄우기 -->
	<select id="DealingProductList" resultMap="deal">
		select d.deal_date, p.prod_name, p.price, d.state, d.deal_num
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where d.buyer_id = #{user_id}
		and d.state = '거래중'
		order by p.prod_date desc
		limit #{pm.startRow},#{pm.vo.perPageNum}
	</select>

	<select id="DealingProductListCnt" resultType="Integer">
		select count(*)
		from mfg_products p join mfg_deal d
		on p.prod_num = d.prod_num
		where d.buyer_id = #{user_id}
		and d.state = '거래중'
		order by prod_date desc
	</select>
	<!-- 거래중 목록 띄우기 -->
	
	<!-- 거래중 ->거래후 버튼 -->
	<update id="DealDone">
		update mfg_deal 
		set state = '거래후'
		where deal_num = #{deal_num}
	</update>
	<!-- 거래중 ->거래후 버튼 -->
	
	<!-- 거래전->거래중 버튼  -->
	<update id="AfterDeal">
		update mfg_deal
		set state = '거래중'
		where deal_num = #{deal_num}
	</update>
	<!-- 거래전->거래중 버튼  -->
	
	<!-- 거래중->거래전 버튼 -->
	<update id="BeforeDeal">
		update mfg_deal
		set state = '거래전'
		where deal_num = #{deal_num}
	</update>
	<!-- 거래중->거래전 버튼 -->
	
	
	
	
	<!-- 상세페이지 좋아요 -->
		<select id="bringLike" resultType="LikeVO">
		select `check` from mfg_like where prod_num=${prod_num} and buyer_id=#{buyer_id}
	</select>
	
	 <!-- 좋아요 확인 -->
	  <select id="findLike" parameterType="java.util.HashMap"  resultType="com.madforgolf.domain.LikeVO">
	  	select * from mfg_like where prod_num=#{prod_num} and buyer_id=#{buyer_id}
	  </select>
  
 	 <!-- 좋아요 저장 -->
	  <insert id="insertLike" >
	   insert into mfg_like(prod_num,buyer_id,`check`) values(#{prod_num},#{buyer_id},1)
	  </insert>
  
  	<!-- 좋아요 확인 -->
	  <select id="findLikeB" resultType="com.madforgolf.domain.LikeVO"> 
	   select * from mfg_like where prod_num=#{prod_num} and buyer_id=#{buyer_id}
	  </select>
  
 	 <!-- 좋아요 삭제 -->
 	  <delete id="deleteLike">
 	 	 delete from mfg_like where prod_num=#{prod_num} and buyer_id=#{buyer_id}
 	 </delete>
	
	
	
	
	
	

</mapper>